/**
 * Copyright (c) 2023, amarioguy (AppleWOA authors).
 * 
 * Module Name:
 *     GTDT.aslc
 * 
 * Abstract:
 *     Generic Timer Description Table. This source file implements the GTDT table for
 *     "Jade" (M1 Pro/Max/Ultra) SoCs.
 * 
 * Environment:
 *     UEFI firmware/runtime services.
 * 
 * License:
 *     SPDX-License-Identifier: BSD-2-Clause-Patent OR MIT
 * 
 * Based on AmpereAltraPkg (part of edk2-platforms) and QemuSbsaPkg (part of mu_tiano_platforms)
 * 
*/

#include <Library/PcdLib.h>
#include <Library/AcpiLib.h>
#include <IndustryStandard/Acpi64.h>
#include <Acpi/AcpiHeader.h>


/**
 * Apple platforms basically just implement the standard ARM timer, with the only major distinction
 * being that the timer interrupts (and most things considered a "PPI" on GIC systems) are using
 * FIQs and not IRQs.
 * 
 * As a result we will assign an arbitrary interrupt number (17 currently) and then proceed to define a standard ARM timer here.
*/

#define SYSTEM_TIMER_BASE_ADDRESS       0xFFFFFFFFFFFFFFFF
#define CNT_READ_BASE_ADDRESS           0xFFFFFFFFFFFFFFFF

#define NON_SECURE_TIMER_EL1_GSIV       0x11
#define VIRTUAL_TIMER_GSIV              0x12
#define SECURE_TIMER_EL1_GSIV           0x13
#define NON_SECURE_EL2_GSIV             0x14

#define GTDT_TIMER_EDGE_TRIGGERED   EFI_ACPI_6_4_GTDT_TIMER_FLAG_TIMER_INTERRUPT_MODE
#define GTDT_TIMER_LEVEL_TRIGGERED  0
#define GTDT_TIMER_ACTIVE_LOW       EFI_ACPI_6_4_GTDT_TIMER_FLAG_TIMER_INTERRUPT_POLARITY
#define GTDT_TIMER_ACTIVE_HIGH      0
#define GTDT_TIMER_SAVE_CONTEXT     EFI_ACPI_6_4_GTDT_TIMER_FLAG_ALWAYS_ON_CAPABILITY
#define GTDT_TIMER_LOSE_CONTEXT     0

#define GTDT_GTIMER_FLAGS          (GTDT_TIMER_LOSE_CONTEXT | GTDT_TIMER_ACTIVE_HIGH | GTDT_TIMER_LEVEL_TRIGGERED)

/**
 * Per the Linux driver for the Apple WDT, Apple platforms have three watchdog timers on the platform,
 * they seem to be contiguously mapped in the same MMIO space.
 * 
 * Watchdog 0 is a "boot to recovery mode" watchdog, not useful.
 * 
 * Watchdog 1 is the one we will use and set as the "generic" watchdog in this specific table.
 * 
 * There is an alternate watchdog timer that serves the same purpose as Watchdog 1, can use either, but will use Watchdog 1.
 * 
 * Reset flow of the Apple watchdog timer:
 *   1) Write 0x4 to wdt_base + 0x1c
 *   2) write zeros to the wdt_base + 0x10 and wdt_base + 0x14
 * 
*/
#define WATCHDOG_COUNT              1


#define ARM_WATCHDOG_REFRESH_BASE     0x00000002922B0010
#define ARM_WATCHDOG_CONTROL_BASE     0x00000002922B001C
#define ARM_WATCHDOG_GSIV             0x277

#define ARM_WATCHDOG_EDGE_TRIGGERED   EFI_ACPI_6_4_GTDT_ARM_GENERIC_WATCHDOG_FLAG_TIMER_INTERRUPT_MODE
#define ARM_WATCHDOG_LEVEL_TRIGGERED  0
#define ARM_WATCHDOG_ACTIVE_LOW       EFI_ACPI_6_4_GTDT_ARM_GENERIC_WATCHDOG_FLAG_TIMER_INTERRUPT_POLARITY
#define ARM_WATCHDOG_ACTIVE_HIGH      0
#define ARM_WATCHDOG_SECURE           EFI_ACPI_6_4_GTDT_ARM_GENERIC_WATCHDOG_FLAG_SECURE_TIMER
#define ARM_WATCHDOG_NON_SECURE       0

#define ARM_WATCHDOG_FLAGS            (ARM_WATCHDOG_NON_SECURE | ARM_WATCHDOG_ACTIVE_HIGH | ARM_WATCHDOG_LEVEL_TRIGGERED)

#pragma pack (1)

typedef struct {
  EFI_ACPI_6_4_GENERIC_TIMER_DESCRIPTION_TABLE          Gtdt;
#if (WATCHDOG_COUNT != 0)
  EFI_ACPI_6_4_GTDT_ARM_GENERIC_WATCHDOG_STRUCTURE     Watchdogs[WATCHDOG_COUNT];
#endif
} EFI_ACPI_6_4_GENERIC_TIMER_DESCRIPTION_TABLES;

#pragma pack ()

EFI_ACPI_6_4_GENERIC_TIMER_DESCRIPTION_TABLES Gtdt = {
  {
    __ACPI_HEADER (
      EFI_ACPI_6_4_GENERIC_TIMER_DESCRIPTION_TABLE_SIGNATURE,
      EFI_ACPI_6_4_GENERIC_TIMER_DESCRIPTION_TABLES,
      EFI_ACPI_6_4_GENERIC_TIMER_DESCRIPTION_TABLE_REVISION
    ),
    SYSTEM_TIMER_BASE_ADDRESS,                              // UINT64  CntControlBasePhysicalAddress
    EFI_ACPI_RESERVED_DWORD,                                // UINT32  Reserved
    SECURE_TIMER_EL1_GSIV,                                  // UINT32  SecurePL1TimerGSIV
    GTDT_GTIMER_FLAGS,                                      // UINT32  SecurePL1TimerFlags
    NON_SECURE_TIMER_EL1_GSIV,                              // UINT32  NonSecurePL1TimerGSIV
    GTDT_GTIMER_FLAGS,                                      // UINT32  NonSecurePL1TimerFlags
    VIRTUAL_TIMER_GSIV,                                     // UINT32  VirtualTimerGSIV
    GTDT_GTIMER_FLAGS,                                      // UINT32  VirtualTimerFlags
    NON_SECURE_EL2_GSIV,                                    // UINT32  NonSecurePL2TimerGSIV
    GTDT_GTIMER_FLAGS,                                      // UINT32  NonSecurePL2TimerFlags
    CNT_READ_BASE_ADDRESS,                                  // UINT64  CntReadBasePhysicalAddress
    1,                                                      // UINT32  PlatformTimerCount
    sizeof (EFI_ACPI_6_4_GENERIC_TIMER_DESCRIPTION_TABLE),  // UINT32  PlatformTimerOffset
  },
#if (WATCHDOG_COUNT != 0)
  {
    {
      EFI_ACPI_6_4_GTDT_ARM_GENERIC_WATCHDOG,                      // UINT8 Type
      sizeof(EFI_ACPI_6_4_GTDT_ARM_GENERIC_WATCHDOG),              // UINT16 Length
      EFI_ACPI_RESERVED_BYTE,                                       // UINT8 Reserved
      ARM_WATCHDOG_REFRESH_BASE,                                   // UINT64 RefreshFramePhysicalAddress
      ARM_WATCHDOG_CONTROL_BASE,                                   // UINT64 WatchdogControlFramePhysicalAddress
      ARM_WATCHDOG_GSIV,                                           // UINT32 WatchdogTimerGSIV
      ARM_WATCHDOG_FLAGS                                           // UINT32 WatchdogTimerFlags
    }
  }
#endif
};


// Reference the table being generated to prevent the optimizer from removing the
// data structure from the executable
VOID* CONST ReferenceAcpiTable = &Gtdt;
